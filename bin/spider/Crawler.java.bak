package spider;

import java.io.IOException;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.TreeMap;


import main.Application;

import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlAnchor;
import com.gargoylesoftware.htmlunit.html.HtmlElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;


public class Crawler implements Serializable {
	WebClient client;
	Queue<Page> downloadQueue;
	Map<String,Page> visited;
	Page entryPoint;
	int depth;
/*
	JGraphFacade facade;
	JGraphLayout layout;
	Graph<Page, DefaultEdge> graph;
	Map nested;
	JGraph jgraph;
	Runnable update; */
	boolean continueCrawl;
	String xpath;

	public Crawler() {
		Application.loadSettings();
		client = Application.getWebClient();
		client.setTimeout(3000);
		downloadQueue = new PriorityQueue<Page>();
		visited = new TreeMap<String,Page>(); 
		continueCrawl = true;
	}
/*
	private Graph<Page, DefaultEdge> setupVisualiser(final String startUrl){
		final ListenableGraph<Page,DefaultEdge> g = new ListenableDirectedGraph<Page, DefaultEdge>(DefaultEdge.class);

		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				JFrame frame = new JFrame(startUrl);
				JGraphModelAdapter<Page, DefaultEdge> m_jgAdapter = new JGraphModelAdapter<Page, DefaultEdge>(g);
				jgraph = new JGraph(m_jgAdapter);
				JScrollPane sp = new JScrollPane(jgraph);
				facade = new JGraphFacade(jgraph);
				//SimpleGridLayout l =  new SimpleGridLayout();
				JGraphRadialTreeLayout r = new JGraphRadialTreeLayout();
				r.setAutoRadius(false);
				r.setRadiusx(250.0);
				r.setRadiusy(250.0);
				layout =r;

				frame.getContentPane().add(sp);
				frame.setSize(new Dimension(700,600));
				frame.setVisible(true);
			}
		}
		);

		return g;
	}
	
	private void relayoutGraph(){
		if(layout != null){
			if(update==null){
				update = new Runnable() {
					@Override
					public void run() {
						layout.run(facade);
						nested = facade.createNestedMap(true, true);
						jgraph.getGraphLayoutCache().edit(nested);
					}
				};
			}
			SwingUtilities.invokeLater(update);
		}
	}
*/
	public void crawl(String startUrl,String xpath, int depth) throws MalformedURLException {
//		graph = setupVisualiser(startUrl);
		URL url = new URL(startUrl);
		Page p = new Page(url,0);//VisualPage(url,0,graph);//TODO
		this.depth = depth;
		this.xpath = xpath;
		visited.put(url.toString(),p);
		downloadQueue.add(p);
		entryPoint = p;
		crawl();
	}
	
	private void crawl(){
		while(!downloadQueue.isEmpty()){
			Page p = downloadQueue.poll();
			System.out.println(p.getScore()+"\t"+p.getUrl());
			try {
				System.out.println("Links left:"+downloadQueue.size()+" Depth: "+p.getDepth() +" Downloading "+p.getUrl().toString());
				if(p.getDepth() < this.depth){
					HtmlPage htmlPage = client.getPage(p.getUrl());
					p.setHtmlPage(htmlPage);
					processPage(p,htmlPage, p.getDepth());
				}
			} catch (FailingHttpStatusCodeException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (ClassCastException e) {
				System.out.println("This is feed lah!");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		System.out.println("\"And we are done.\" - Sanjay Jain");
		/*
		Collection<Page> pages = visited.values();
		for(Page p: pages){
			List<Page> outgoing = p.getOutgoingLinks();
			boolean useful = false;
			for(Page o:pages) {
				if(o.isWanted()) {
					useful = true;
					System.out.println("USEFUL!");
					break;
				}
			}
			if(!useful){
				System.out.println("Someone is useless!");
				p.removePage();
			}
			useful = false;
		}
		*/
	}

	private URL linkToUrl(HtmlAnchor a) throws MalformedURLException{
		HtmlPage page = (HtmlPage)a.getPage();
		String url = a.getHrefAttribute();
		int index = url.indexOf('#');
		if(index < 0) return page.getFullyQualifiedUrl(url);
		else {
			url = url.substring(0,index);
			return page.getFullyQualifiedUrl(url);
		}

	}

	private void processPage(Page parentPage,HtmlPage htmlPage,int depth){
		if(continueCrawl) {
			List<HtmlAnchor> links = htmlPage.getAnchors();
			for(HtmlAnchor a: links){
				try {
					URL url = linkToUrl(a);
					if(url.getHost().equals(parentPage.getUrl().getHost())){
						Page page = visited.get(url.toString());
						if(page==null){
							page = new Page(url, depth+1); //VisualPage(url,depth+1,graph);
							page.setScore(entryPoint);
//							relayoutGraph();
							downloadQueue.add(page);
							visited.put(url.toString(), page);
						}
						if(parentPage != page) {
							page.addToIncomingLinks(parentPage);
							parentPage.addToOutgoingLinks(page);
						}
					}
				} catch (MalformedURLException e) {
				}
			}
			if(downloadQueue.size()>= 50) continueCrawl = false;
		}
		List<HtmlElement> e =  (List<HtmlElement>)htmlPage.getByXPath(xpath);
		parentPage.setWanted(!e.isEmpty());
		if(parentPage.isWanted()) System.out.println("WANTED!");
		/*
		AttributeValues av = parentPage.getAttributeValues();
		LinkedList<LearnerData> collected = new LinkedList<LearnerData>();
		FeatureExtractor<LearnerData> extractor = new FeatureExtractor<LearnerData>(av);
		extractor.extractFromHtmlPage(collected, htmlPage,
			"//div[@id='mainContent']/div[1]/div[1]/ul/li/h3[1]/a[1]"
		);
		collected = null;
		extractor = null; 
		Set<String> attSet = parentPage.getAttributeValues().keySet();
		Set<String> entrySet = entryPoint.getAttributeValues().keySet();
		HashSet<String> origSet = new HashSet<String>(entryPoint.getAttributeValues().keySet());
		origSet.retainAll(attSet);
		System.out.println(((double)origSet.size()/entrySet.size())*100);*/
	}

	public Page getMostIncomingLinks(){
		Collection<Page> p = visited.values();
		Page[] parr = new Page[p.size()];
		p.toArray(parr);
		Arrays.sort(parr);
		System.out.println("Top 10 links:");
		for(int i=0;i<10 && i<p.size();i++){
			System.out.println(parr[i].getIncomingLinks().size()+"\t"+parr[i].getUrl());
		}
		return parr[0];
	}	
	public Collection<Page> getPages() {
		return visited.values();
	}
}
